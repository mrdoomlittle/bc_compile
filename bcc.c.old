# include "bcc.h"
bci_addr_t addr = 0;
void incr_addr() {addr++;}

bcc_err_t open_file(struct file_t *__file) {
	if ((__file->fd = open(__file->path, __file->flags,__file->mode)) < 0) {
		fprintf(stderr, "failed to open file '%s'\n", __file->path);
		return BCC_FAILURE;
	}

	if (stat(__file->path, &__file->st) < 0) {
		close(__file->fd);
		fprintf(stderr, "failed to stat file '%s'\n", __file->path);
		return BCC_FAILURE;
	}

	return BCC_SUCCESS;
}

mdl_uint_t fsize(struct file_t *__file) {
	return __file->st.st_size;
}

void bcb_put_w8(mdl_u8_t **__bcb_point, mdl_u8_t __val) {
	**__bcb_point = __val;
	(*__bcb_point)++;
	incr_addr();
}

void bcb_put_w16(mdl_u8_t **__bcb_point, mdl_u16_t __val) {
	bcb_put_w8(__bcb_point, __val);
	bcb_put_w8(__bcb_point, __val >> 8);
}

mdl_u8_t bcb_get_w8(mdl_u8_t *__bc_buff, bci_addr_t __addr) {
	return *(__bc_buff+__addr);}


void bcb_put(mdl_u8_t **__bcb_point, mdl_u8_t *__val, mdl_uint_t __bc) {
	for (mdl_u8_t *itr = __val; itr != __val+__bc; itr++) bcb_put_w8(__bcb_point, *itr);}

void bcb_addr_put(mdl_u8_t **__bcb_point, bci_addr_t __addr) {
	bcb_put(__bcb_point, (mdl_u8_t*)&__addr, sizeof(bci_addr_t));}

void bci_assign(mdl_u8_t **__bcb_point, bci_addr_t __addr, mdl_u8_t *__val, mdl_u8_t __type) {
	bcb_put_w8(__bcb_point, _bcii_assign);
	bcb_put_w8(__bcb_point, __type);
	bcb_addr_put(__bcb_point, __addr);
	bcb_put(__bcb_point, __val, bci_sizeof(__type));
}

void bci_mov(mdl_u8_t **__bcb_point, mdl_u8_t __dest_type, mdl_u8_t __src_type, bci_addr_t __dest_addr, bci_addr_t __src_addr) {
	bcb_put_w8(__bcb_point, _bcii_mov);

	bcb_put_w8(__bcb_point, __dest_type);
	bcb_put_w8(__bcb_point, __src_type);

	bcb_addr_put(__bcb_point, __dest_addr);
	bcb_addr_put(__bcb_point, __src_addr);
}

void bci_print(mdl_u8_t **__bcb_point, mdl_u8_t __type, bci_addr_t __addr) {
	bcb_put_w8(__bcb_point, _bcii_print);
	bcb_put_w8(__bcb_point, __type);
	bcb_addr_put(__bcb_point, __addr);
}

void bci_exit(mdl_u8_t **__bcb_point) {
	bcb_put_w8(__bcb_point, _bcii_exit);
}

mdl_uint_t str_to_no(mdl_u8_t *__str, mdl_u8_t *__is_no) {
	mdl_uint_t no_unit = 1, no = 0;
	for (mdl_uint_t ic = 0;; ic++) {
		if (__str[ic+1] == '\0') break;
		no_unit = no_unit*10;
	}

	for (mdl_u8_t *itr = __str;; itr++) {
		if (*itr == '\0') break;
		switch(*itr) {
			case '0': break;
			case '1': no += 1*no_unit; break;
			case '2': no += 2*no_unit; break;
			case '3': no += 3*no_unit; break;
			case '4': no += 4*no_unit; break;
			case '5': no += 5*no_unit; break;
			case '6': no += 6*no_unit; break;
			case '7': no += 7*no_unit; break;
			case '8': no += 8*no_unit; break;
			case '9': no += 9*no_unit; break;
			default:
				if (__is_no != NULL) *__is_no = 0;
				return 0;
		};

		if (no_unit != 1) no_unit = no_unit/10;
	}
	if (__is_no != NULL) *__is_no = 1;
	return no;
}

struct obj_context_t {
	mdl_u8_t type;
	void *name, *addr;
	mdl_uint_t name_len;
};

struct obj_context_t* objc_indx = NULL;
mdl_uint_t obj_c = 1;

mdl_u8_t *src = NULL, *bc_buff = NULL;
mdl_u8_t *bcb_point;

struct file_t src_file;

bcc_err_t bcc_init(struct bcc_t *__bcc) {
	bcc_err_t any_err;

	src_file.path = __bcc-> src_fpth;
	src_file.flags = O_RDONLY;

	if ((any_err = open_file(&src_file)) != BCC_SUCCESS) return any_err;

	src = (mdl_u8_t*)malloc(fsize(&src_file));
	read(src_file.fd, src, fsize(&src_file));
	close(src_file.fd);

	bc_buff = (mdl_u8_t*)malloc(128);
	bcb_point = bc_buff;
	objc_indx = (struct obj_context_t*)malloc(sizeof(struct obj_context_t*));
	return BCC_SUCCESS;
}

struct obj_context_t *obj_put(struct obj_context_t **__objc_indx, mdl_uint_t *__obj_c) {
	*__objc_indx = (struct obj_context_t*)realloc(*__objc_indx, (++(*__obj_c))*sizeof(struct obj_context_t));
	(*__objc_indx+*__obj_c-1)-> name = NULL;
	(*__objc_indx+*__obj_c-1)-> addr = NULL;
	return (*__objc_indx+*__obj_c-2);
}

void obj_init(struct obj_context_t *__obj_context, mdl_u8_t *__name, mdl_u16_t __addr, mdl_u8_t *__tmp_buff) {
	mdl_uint_t name_len = __name - __tmp_buff;
	__obj_context-> name = malloc(name_len*sizeof(mdl_u8_t));
	strncpy((mdl_u8_t*)__obj_context-> name, __tmp_buff, name_len);
	__obj_context-> name_len = name_len - 1;

	__obj_context-> addr = malloc(sizeof(mdl_u16_t));
	*(mdl_u16_t*)__obj_context-> addr = __addr;
}

struct obj_context_t *obj_lookup(struct obj_context_t *__objc_indx, mdl_uint_t __obj_c, char const *__name) {
	mdl_uint_t name_len = strlen(__name);
	for (struct obj_context_t *itr = __objc_indx; itr != __objc_indx+(__obj_c-1); itr++) {
		if (itr-> name_len == name_len) if (!strcmp(itr-> name, __name)) return itr;}
	return NULL;
}

bcc_err_t bcc_de_init() {
	free(src);
	free(bc_buff);
}

mdl_u8_t no_data(mdl_u8_t __val) { // data we dont need
	if (__val == ' ' || __val == '\n' || __val == '\0') return 1;
	return 0;
}

mdl_u8_t is_token(char const *__str, mdl_u8_t **__src_itr, mdl_u8_t *__src, mdl_uint_t __st_size, mdl_u8_t __ndc) {
	mdl_uint_t str_len = 0;
	for (mdl_u8_t *itr = (char*)__str;; itr++)
		if (*itr != '\0') str_len++; else break;

	if (((*__src_itr)-__src)+str_len > __st_size) return 0;
	for (mdl_u8_t *itr = *__src_itr; itr != (*__src_itr)+str_len; itr++)
		if (*itr != *(__str++)) return 0;

	if (__ndc)
		if (!no_data(*((*__src_itr)+str_len))) return 0;

	*__src_itr += str_len - 1;
	return 1;
}

mdl_u8_t out_buff[128];

typedef struct {
	mdl_u8_t l_chr, r_chr;
} op_sign_t;

op_sign_t op_signs[] = {
	{.l_chr='=', .r_chr='='}
};

op_sign_t op_sign_chr(mdl_u8_t __l_chr, mdl_u8_t __r_chr) {
	op_sign_t _op_sign = {
		.l_chr = __l_chr,
		.r_chr = __r_chr
	};
	return _op_sign;
}

mdl_u8_t wait_for(op_sign_t __op_sign, mdl_u8_t **__src_itr, mdl_u8_t *__src, mdl_uint_t __st_size) {
	if ((*__src_itr)-__src > __st_size) {
		fprintf(stderr, "error.\n");
		return 0;
	}

	(*__src_itr)++;
	if (__op_sign.l_chr != '\0') {
		if (__op_sign.r_chr != '\0') {
			if (**__src_itr == __op_sign.l_chr && *((*__src_itr)+1) == __op_sign.r_chr) return 0;
		} else
			if (**__src_itr == __op_sign.l_chr) return 0;
	} else return 0;

	return 1;
}

mdl_u8_t is_op_sign(op_sign_t __op_sign) {
	for (op_sign_t *itr = op_signs; itr != op_signs + sizeof(op_signs)/sizeof(op_sign_t); itr++)
		if (__op_sign.l_chr == itr-> l_chr && __op_sign.r_chr == itr-> r_chr) return 1;
	return 0;
}

bcc_err_t bcc_dump_bc(char const *__fpath) {
	bcc_err_t any_err;
	struct file_t out_file = {
		.path = __fpath,
		.flags = O_RDWR | O_CREAT,
		.mode =  S_IRWXU | S_IRWXG | S_IRWXO
	};

	if ((any_err = open_file(&out_file)) != BCC_SUCCESS) return any_err;

	write(out_file.fd, bc_buff, bcb_point-bc_buff);
	close(out_file.fd);
	return BCC_SUCCESS;
}

mdl_u8_t tmp_buff[128];
mdl_u8_t *tmp_ptr = NULL;

mdl_u8_t *src_buff = NULL;
mdl_u8_t *src_itr = NULL;
# define CSEC_MODE 0b10000000
bcc_err_t bcc_run(struct bcc_t *__bcc) {
	src_buff = src;
	src_itr = src;
	mdl_u8_t rt_flags = 0b00000000;
	do {
		struct token_t token;
		lex(&token);
		parse(&token);
		printf("token kind: %u, %c\n", token.kind, *token.p);
/*
		if (is_token("\x2f\x2a", &itr, src, fsize(&src_file), 0)) bcc_tog_flag(&rt_flags, CSEC_MODE);
		if (is_token("\x2a\x2f", &itr, src, fsize(&src_file), 0)) {bcc_tog_flag(&rt_flags, CSEC_MODE);itr++;printf("exit\n");}
		if (bcc_is_flag(rt_flags, CSEC_MODE)) {goto end;}

		if (is_token((tmp_ptr = "w8"), &itr, src, fsize(&src_file), 1) || is_token((tmp_ptr = "w16"), &itr, src, fsize(&src_file), 1) ||
			is_token((tmp_ptr = "w32"), &itr, src, fsize(&src_file), 1) || is_token((tmp_ptr = "w64"), &itr, src, fsize(&src_file), 1)) {
			mdl_u8_t type;
			if (!strcmp(tmp_ptr, "w8"))
				type = _bcit_w8;
			else if (!strcmp(tmp_ptr, "w16"))
				type = _bcit_w16;
			else if (!strcmp(tmp_ptr, "w32"))
				type = _bcit_w32;
			else if (!strcmp(tmp_ptr, "w64"))
				type = _bcit_w64;

			op_sign_t op_sign = op_sign_chr('=', '\0');

			mdl_u8_t *name = tmp_buff, no_val = 0;
			while(wait_for(op_sign, &itr, src, fsize(&src_file))) {
				if (*itr == ';') {
					if (itr-src == 0) {
						fprintf(stderr, "an object requires a name.\n");
						return BCC_FAILURE;
					} else {
						no_val = 1;
						break;
					}
				}

				if (!no_data(*itr)) {*name = *itr; name++;}
			}

			*name = '\0';
			name++;

			printf("name: %s\n", tmp_buff);
			if (obj_lookup(objc_indx, obj_c, tmp_buff) != NULL) {
				fprintf(stderr, "can't have same named objects '%s'\n", tmp_buff);
				return BCC_FAILURE;
			}

			struct obj_context_t *obj = obj_put(&objc_indx, &obj_c);
			obj_init(obj, name, addr, tmp_buff);
			obj-> type = type;

			if (!no_val) {
				mdl_u8_t *val = tmp_buff;
				op_sign = op_sign_chr(';', '\0');
				while(wait_for(op_sign, &itr, src, fsize(&src_file))) {
					if (!no_data(*itr)) {*val = *itr; val++;}}
				*val = '\0';
				val++;

				mdl_u8_t is_no = 0;
				mdl_uint_t no =  str_to_no(tmp_buff, &is_no);
				if (is_no)
					bci_assign(&bcb_point, addr, (mdl_u8_t*)&no, type);
				else {
					if ((obj = obj_lookup(objc_indx, obj_c, tmp_buff)) == NULL) {
						fprintf(stderr, "obj lookup failed to find '%s'\n", tmp_buff);
						return BCC_FAILURE;
					}

					bci_mov(&bcb_point, type, obj->type, addr, *(bci_addr_t*)obj->addr);
				}

				printf("w8 found, name: %s, val: %d, type: %u\n", (char*)obj->name, str_to_no(tmp_buff, NULL), type);
			}
		} else if (is_token("print", &itr, src, fsize(&src_file), 1)) {
			mdl_u8_t *name = tmp_buff;
			op_sign_t op_sign = op_sign_chr(';', '\0');
			while(wait_for(op_sign, &itr, src, fsize(&src_file))) {
				if (!no_data(*itr)) {*name = *itr; name++;}}
			*name = '\0';
			name++;

			struct obj_context_t *obj;
			if ((obj = obj_lookup(objc_indx, obj_c, tmp_buff)) == NULL) {
				fprintf(stderr, "obj lookup failed to find '%s'\n", tmp_buff);
				return BCC_FAILURE;
			}

			bci_print(&bcb_point, obj->type, *(bci_addr_t*)obj->addr);
		} else if (is_token("incr", &itr, src, fsize(&src_file), 1)) {
		} else if (is_token("decr", &itr, src, fsize(&src_file), 1)) {
		} else if (is_token("exit", &itr, src, fsize(&src_file), 1))
			bci_exit(&bcb_point);

		end:
		itr++;
*/
		src_itr++;
	} while(src_itr <= src_buff+fsize(&src_file));
}

mdl_u8_t bcc_is_flag(bcc_flag_t __flags, bcc_flag_t __flag) {
	if ((__flags & __flag) == __flag) return 1; return 0;}

void bcc_tog_flag(bcc_flag_t *__flags, bcc_flag_t __flag) {
	if (bcc_is_flag(*__flags, __flag))
		(*__flags) ^= __flag;
	else
		(*__flags) |= __flag;
}
